package _02310

import (
	"fmt"
	"testing"
)

func app() func(string) string {
	t := "Hi"
	c := func(b string) string {
		t = t + " " + b
		return t
	}
	return c
}

func Test20231031(t *testing.T) {
	a := app()
	b := app()
	a("go")
	fmt.Println(b("All"))
}

/*
闭包在实现上是一个结构体，它存储了一个函数（通常是其入口地址）和一个关联的环境（相当于一个符号查找表）
环境里是若干对符号和值的对应关系，它既要包括约束变量（该函数内部绑定的符号），
也要包括自由变量（在函数外部定义但在函数内被引用），有些函数也可能没有自由变量。
闭包跟函数最大的不同在于，当捕捉闭包的时候，它的自由变量会在捕捉时被确定，
这样即便脱离了捕捉时的上下文，它也能照常运行。捕捉时对于值的处理可以是值拷贝，也可以是名称引用，这通常由语言设计者决定，也可能由用户自行指定（如 C++）
*/

// 在支持函数是一等公民的语言中,一个函数的返回值是另一个函数,被返回的函数可以访问父函数内的变量,当这个被返回的函数在外部执行时，就产生了闭包
